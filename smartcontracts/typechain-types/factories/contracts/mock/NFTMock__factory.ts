/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NFTMock,
  NFTMockInterface,
} from "../../../contracts/mock/NFTMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "string",
        name: "tokenURI",
        type: "string",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061062d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780632a55205a1461009757806342842e0e146100c85780636352211e146100e4578063d0def52114610114578063e985e9c514610130575b600080fd5b610081600480360381019061007c91906101fc565b610160565b60405161008e9190610244565b60405180910390f35b6100b160048036038101906100ac9190610295565b610167565b6040516100bf929190610325565b60405180910390f35b6100e260048036038101906100dd919061037a565b610178565b005b6100fe60048036038101906100f991906103cd565b61017d565b60405161010b91906103fa565b60405180910390f35b61012e6004803603810190610129919061055b565b610184565b005b61014a600480360381019061014591906105b7565b610188565b6040516101579190610244565b60405180910390f35b6000919050565b600080600080915091509250929050565b505050565b6000919050565b5050565b600092915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6101d9816101a4565b81146101e457600080fd5b50565b6000813590506101f6816101d0565b92915050565b6000602082840312156102125761021161019a565b5b6000610220848285016101e7565b91505092915050565b60008115159050919050565b61023e81610229565b82525050565b60006020820190506102596000830184610235565b92915050565b6000819050919050565b6102728161025f565b811461027d57600080fd5b50565b60008135905061028f81610269565b92915050565b600080604083850312156102ac576102ab61019a565b5b60006102ba85828601610280565b92505060206102cb85828601610280565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610300826102d5565b9050919050565b610310816102f5565b82525050565b61031f8161025f565b82525050565b600060408201905061033a6000830185610307565b6103476020830184610316565b9392505050565b610357816102f5565b811461036257600080fd5b50565b6000813590506103748161034e565b92915050565b6000806000606084860312156103935761039261019a565b5b60006103a186828701610365565b93505060206103b286828701610365565b92505060406103c386828701610280565b9150509250925092565b6000602082840312156103e3576103e261019a565b5b60006103f184828501610280565b91505092915050565b600060208201905061040f6000830184610307565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104688261041f565b810181811067ffffffffffffffff8211171561048757610486610430565b5b80604052505050565b600061049a610190565b90506104a6828261045f565b919050565b600067ffffffffffffffff8211156104c6576104c5610430565b5b6104cf8261041f565b9050602081019050919050565b82818337600083830152505050565b60006104fe6104f9846104ab565b610490565b90508281526020810184848401111561051a5761051961041a565b5b6105258482856104dc565b509392505050565b600082601f83011261054257610541610415565b5b81356105528482602086016104eb565b91505092915050565b600080604083850312156105725761057161019a565b5b600061058085828601610365565b925050602083013567ffffffffffffffff8111156105a1576105a061019f565b5b6105ad8582860161052d565b9150509250929050565b600080604083850312156105ce576105cd61019a565b5b60006105dc85828601610365565b92505060206105ed85828601610365565b915050925092905056fea2646970667358221220b07af1091e5a0b844140421b46331804445db1a27eb1539309e9285b829e016364736f6c63430008090033";

type NFTMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTMock__factory extends ContractFactory {
  constructor(...args: NFTMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTMock> {
    return super.deploy(overrides || {}) as Promise<NFTMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTMock {
    return super.attach(address) as NFTMock;
  }
  override connect(signer: Signer): NFTMock__factory {
    return super.connect(signer) as NFTMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTMockInterface {
    return new utils.Interface(_abi) as NFTMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTMock {
    return new Contract(address, _abi, signerOrProvider) as NFTMock;
  }
}
